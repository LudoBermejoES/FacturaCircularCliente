<%= form_with url: form_url,
              local: true,
              method: (defined?(form_method) ? form_method : :post),
              scope: :workflow_transition,
              class: "space-y-6" do |form| %>

  <% if flash[:error] %>
    <div class="rounded-md bg-red-50 p-4">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
          </svg>
        </div>
        <div class="ml-3">
          <h3 class="text-sm font-medium text-red-800">
            There were problems with your submission
          </h3>
          <div class="mt-2 text-sm text-red-700">
            <%= flash[:error] %>
          </div>
        </div>
      </div>
    </div>
  <% end %>

  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <!-- Basic Information -->
    <div class="space-y-4">
      <div>
        <%= form.label :display_name, class: "block text-sm font-medium text-gray-700" %>
        <%= form.text_field :display_name,
                            value: @workflow_transition['display_name'],
                            class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500",
                            placeholder: "e.g., Approve Invoice" %>
        <p class="mt-1 text-sm text-gray-500">Human-readable name shown in the interface</p>
      </div>

      <div>
        <%= form.label :name, class: "block text-sm font-medium text-gray-700" %>
        <%= form.text_field :name,
                            value: @workflow_transition['name'],
                            class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 font-mono",
                            placeholder: "e.g., approve" %>
        <p class="mt-1 text-sm text-gray-500">System name (lowercase, underscores only)</p>
      </div>

      <!-- Hidden code field - auto-generated from name -->
      <%= form.hidden_field :code, value: @workflow_transition['code'] || @workflow_transition['name'] || '' %>
    </div>

    <!-- State Selection -->
    <div class="space-y-4">
      <div>
        <%= form.label :from_state_id, "From State", class: "block text-sm font-medium text-gray-700" %>
        <%= form.select :from_state_id,
                        options_for_select([['Any State', '']] + (@workflow_states.is_a?(Hash) ? @workflow_states[:data] || @workflow_states['data'] || [] : @workflow_states).map { |state| [state[:name] || state['name'], state[:id] || state['id']] }, @workflow_transition['from_state_id']),
                        {},
                        { class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" } %>
        <p class="mt-1 text-sm text-gray-500">State from which this transition can be executed</p>
      </div>

      <div>
        <%= form.label :to_state_id, "To State", class: "block text-sm font-medium text-gray-700" %>
        <%= form.select :to_state_id,
                        options_for_select([['Select target state', '']] + (@workflow_states.is_a?(Hash) ? @workflow_states[:data] || @workflow_states['data'] || [] : @workflow_states).map { |state| [state[:name] || state['name'], state[:id] || state['id']] }, @workflow_transition['to_state_id']),
                        {},
                        { class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" } %>
        <p class="mt-1 text-sm text-gray-500">State to which the invoice will transition</p>
      </div>
    </div>
  </div>

  <!-- Requirements Section -->
  <div class="space-y-4">
    <h3 class="text-lg font-medium text-gray-900">Transition Requirements</h3>

    <!-- Comment Requirement -->
    <div class="flex items-start">
      <div class="flex items-center h-5">
        <%= form.check_box :requires_comment,
                           { checked: @workflow_transition['requires_comment'] },
                           { class: "focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded" } %>
      </div>
      <div class="ml-3 text-sm">
        <%= form.label :requires_comment, "Require Comment", class: "font-medium text-gray-700" %>
        <p class="text-gray-500">Users must provide a comment when executing this transition</p>
      </div>
    </div>

    <!-- Required Roles -->
    <div>
      <%= form.label :required_roles, "Required Roles", class: "block text-sm font-medium text-gray-700" %>
      <div class="mt-2 grid grid-cols-2 md:grid-cols-3 gap-3">
        <% %w[admin manager reviewer accountant user].each do |role| %>
          <div class="flex items-center">
            <input type="checkbox"
                   name="workflow_transition[required_roles][]"
                   value="<%= role %>"
                   id="required_role_<%= role %>"
                   <%= 'checked' if @workflow_transition['required_roles']&.include?(role) %>
                   class="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded">
            <label for="required_role_<%= role %>" class="ml-2 text-sm text-gray-700">
              <%= role.humanize %>
            </label>
          </div>
        <% end %>
      </div>
      <p class="mt-2 text-sm text-gray-500">
        Users must have at least one of these roles to execute this transition.
        Leave empty to allow any authenticated user.
      </p>
    </div>

    <!-- Guard Conditions -->
    <div>
      <%= form.label :guard_conditions, "Guard Conditions", class: "block text-sm font-medium text-gray-700" %>
      <div class="mt-2 space-y-2" id="guard-conditions-container">
        <% guard_conditions = @workflow_transition['guard_conditions'] || [] %>
        <% guard_conditions.each_with_index do |condition, index| %>
          <div class="flex items-center space-x-2 guard-condition-item">
            <input type="text"
                   name="workflow_transition[guard_conditions][]"
                   value="<%= condition %>"
                   placeholder="e.g., total_amount > 1000"
                   class="flex-1 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 font-mono">
            <button type="button" class="btn-sm btn-danger" onclick="removeGuardCondition(this)">
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
              </svg>
            </button>
          </div>
        <% end %>

        <!-- Add initial condition input if none exist -->
        <% if guard_conditions.empty? %>
          <div class="flex items-center space-x-2 guard-condition-item">
            <input type="text"
                   name="workflow_transition[guard_conditions][]"
                   placeholder="e.g., total_amount > 1000"
                   class="flex-1 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 font-mono">
            <button type="button" class="btn-sm btn-danger" onclick="removeGuardCondition(this)">
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
              </svg>
            </button>
          </div>
        <% end %>
      </div>

      <div class="mt-2">
        <button type="button" class="btn-sm btn-secondary" onclick="addGuardCondition()">
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
          </svg>
          Add Condition
        </button>
      </div>

      <p class="mt-2 text-sm text-gray-500">
        Conditions that must be met for this transition to be available.
        Use field names and operators like <code class="bg-gray-100 px-1 rounded">total_amount > 1000</code> or <code class="bg-gray-100 px-1 rounded">status == 'ready'</code>.
      </p>
    </div>
  </div>

  <!-- Form Actions -->
  <div class="flex justify-end space-x-3 pt-6 border-t border-gray-200">
    <%= link_to workflow_definition_workflow_transitions_path(@workflow_definition[:id] || @workflow_definition['id']),
                class: "btn-secondary" do %>
      Cancel
    <% end %>
    <%= form.submit submit_label,
                    class: "btn-primary" %>
  </div>
<% end %>

<script>
  // Auto-generate system name and code from display name
  document.addEventListener('DOMContentLoaded', function() {
    const displayName = document.querySelector('#workflow_transition_display_name');
    const systemName = document.querySelector('#workflow_transition_name');
    const codeField = document.querySelector('#workflow_transition_code');
    const form = document.querySelector('form');

    if (displayName && systemName) {
      displayName.addEventListener('input', function() {
        if (!systemName.value || systemName.dataset.autoGenerated !== 'false') {
          const generated = this.value
            .toLowerCase()
            .replace(/[^a-z0-9]+/g, '_')
            .replace(/^_+|_+$/g, '');
          systemName.value = generated;
          systemName.dataset.autoGenerated = 'true';

          // Also update code field
          if (codeField) {
            codeField.value = generated;
          }
        }
      });

      systemName.addEventListener('input', function() {
        this.dataset.autoGenerated = 'false';

        // Also update code field when name changes
        if (codeField) {
          codeField.value = this.value;
        }
      });
    }

    // Ensure code field is populated before form submission
    if (form && systemName && codeField) {
      form.addEventListener('submit', function(e) {
        // If code field is empty but name has a value, populate it
        if (!codeField.value && systemName.value) {
          codeField.value = systemName.value;
        }
        // If both are empty but display name has a value, generate from display name
        else if (!codeField.value && !systemName.value && displayName && displayName.value) {
          const generated = displayName.value
            .toLowerCase()
            .replace(/[^a-z0-9]+/g, '_')
            .replace(/^_+|_+$/g, '');
          systemName.value = generated;
          codeField.value = generated;
        }
      });
    }
  });

  function addGuardCondition() {
    const container = document.getElementById('guard-conditions-container');
    const newCondition = document.createElement('div');
    newCondition.className = 'flex items-center space-x-2 guard-condition-item';
    newCondition.innerHTML = `
      <input type="text"
             name="workflow_transition[guard_conditions][]"
             placeholder="e.g., total_amount > 1000"
             class="flex-1 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 font-mono">
      <button type="button" class="btn-sm btn-danger" onclick="removeGuardCondition(this)">
        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
        </svg>
      </button>
    `;
    container.appendChild(newCondition);
  }

  function removeGuardCondition(button) {
    const container = document.getElementById('guard-conditions-container');
    const items = container.querySelectorAll('.guard-condition-item');

    // Always keep at least one condition input
    if (items.length > 1) {
      button.closest('.guard-condition-item').remove();
    } else {
      // Clear the input instead of removing it
      button.closest('.guard-condition-item').querySelector('input').value = '';
    }
  }
</script>