require 'test_helper'

class InvoiceWorkflowTest < ActionDispatch::IntegrationTest
  setup do
    # Set up test data
    @user_token = 'test-jwt-token'
    @company_id = 1859
    @workflow_id = 373

    # Use the same authentication approach as working system tests
    AuthService.stubs(:login).returns({
      access_token: @user_token,
      refresh_token: "test_refresh_token",
      user: {
        id: 1,
        email: "admin@example.com",
        name: "Admin User",
        company_id: @company_id
      },
      company_id: @company_id,
      companies: [{ id: @company_id, name: "Test Company", role: "admin" }]
    })

    AuthService.stubs(:validate_token).returns({ valid: true })

    # Mock API services for integration tests
    mock_invoice = {
      id: 123,
      invoice_number: "INV-001",
      status: "draft",
      workflow_id: @workflow_id,
      company_id: @company_id
    }

    # Mock all API calls that controllers will make
    InvoiceService.stubs(:create).returns({ data: mock_invoice })
    InvoiceService.stubs(:find).returns(mock_invoice)
    InvoiceService.stubs(:update).returns({ data: mock_invoice })
    InvoiceService.stubs(:all).returns({ invoices: [], meta: { total: 0 } })
    InvoiceService.stubs(:statistics).returns({ total_count: 0 })
    InvoiceService.stubs(:recent).returns([])
    WorkflowService.stubs(:transition).returns({ data: { success: true } })
    WorkflowService.stubs(:freeze).returns({ data: { success: true } })
    WorkflowService.stubs(:definitions).returns({ data: [] })
    CompanyService.stubs(:all).returns({ companies: [] })

    # Perform login to establish session
    post login_path, params: {
      email: "admin@example.com",
      password: "password123"
    }
  end

  test "should create invoice with workflow and transition to approved status" do
    # Mock the invoice creation API response
    mock_invoice_response = {
      data: {
        id: '737',
        type: 'invoices',
        attributes: {
          invoice_number: 'FC-0002',
          status: 'draft',
          document_type: 'FC',
          issue_date: '2025-09-18',
          seller_party_id: @company_id,
          buyer_company_contact_id: 112,
          total_invoice: 1815.0,
          workflow_definition_id: @workflow_id
        }
      }
    }

    # Test invoice creation
    post invoices_path, params: {
        invoice: {
          invoice_series_id: 748,
          document_type: 'FC',
          issue_date: '2025-09-18',
          status: 'draft',
          workflow_definition_id: @workflow_id,
          invoice_lines_attributes: [
            {
              description: 'Software Development Services',
              quantity: 1,
              unit_price: 1500,
              tax_rate: 21.0,
              discount_percentage: 0.0
            }
          ]
        },
        seller_party_id: @company_id,
        buyer_company_contact_id: 112
      }, headers: { 'Authorization' => "Bearer #{@user_token}" }

    # Verify response
    assert_response :success, "Invoice should be created successfully"

    # Test workflow transition
    invoice_id = 737

    # Mock transition API response
    mock_transition_response = {
      id: invoice_id,
      invoice_id: invoice_id,
      current_state: {
        code: 'approved',
        name: 'Approved',
        category: 'active'
      },
      previous_state: {
        code: 'draft',
        name: 'Draft'
      },
      transitioned_at: Time.current.iso8601
    }

    # Perform status transition
    post invoice_workflow_path(invoice_id), params: {
      status: 'approved'
    }, headers: { 'Authorization' => "Bearer #{@user_token}" }

    assert_response :success, "Invoice status should transition to approved"
  end

  test "should freeze approved invoice" do
    invoice_id = 737

    # Mock freeze API response
    mock_freeze_response = {
      data: {
        id: invoice_id,
        type: 'invoices',
        attributes: {
          invoice_number: 'FC-0002',
          status: 'approved',
          is_frozen: true,
          frozen_at: Time.current.iso8601,
          frozen_hash: 'abc123def456'
        }
      }
    }

    # Freeze the invoice
    post freeze_invoice_path(invoice_id), headers: { 'Authorization' => "Bearer #{@user_token}" }

    assert_response :success, "Invoice should be frozen successfully"
  end

  test "should not allow modifications to frozen invoice" do
    invoice_id = 737

    # Attempt to update frozen invoice
    patch invoice_path(invoice_id), params: {
      invoice: {
        notes: 'Trying to update frozen invoice'
      }
    }, headers: { 'Authorization' => "Bearer #{@user_token}" }

    # Should receive error response
    assert_response :unprocessable_entity, "Should not allow updating frozen invoice"
  end

  test "should handle workflow transition errors gracefully" do
    invoice_id = 737

    # Attempt invalid transition
    post invoice_workflow_path(invoice_id), params: {
      status: 'invalid_status'
    }, headers: { 'Authorization' => "Bearer #{@user_token}" }

    assert_response :unprocessable_entity, "Should reject invalid status transition"
  end
end